<!--Documentation: http://msdn.microsoft.com/en-us/library/ff660914%28v=pandp.20%29.aspx -->
<asyncJobsUnity xmlns="http://schemas.microsoft.com/practices/2010/unity">
  <assembly name="crds-angular" />
  <assembly name="Crossroads.AsyncJobs" />
  <assembly name="Crossroads.Utilities" />
  <assembly name="Crossroads.Web.Common" />
  <assembly name="MinistryPlatform.Translation" />
  <assembly name="RestSharp" />
  <assembly name="System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <assembly name="System.Security.Cryptography" />
  <assembly name="GoogleMapsAPI.NET" />

  <container>
    <!-- Main Job Processor - add to the "processors" array below as new job processors are added -->
    <register type="Crossroads.AsyncJobs.Application.JobProcessor">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="processors">
          <array>
            <dependency name="stripeEventQueueProcessor"/>
            <dependency name="checkScannerBatchQueueProcessor"/>
            <dependency name="tripEventQueueProcessor"/>
            <dependency name="signupToServeQueueProcessor" />
            <dependency name="scheduledJobProcessor" />
          </array>
        </param>
        <param name="scheduler"></param>
      </constructor>
    </register>

    <!-- Message Queue Factory -->
    <register name="asyncMessageQueueFactory" type="Crossroads.Utilities.Messaging.Interfaces.IMessageQueueFactory" mapTo="Crossroads.Utilities.Messaging.MessageQueueFactory"/>

    <!-- Stripe Event queue processor -->
    <register name="stripeEventQueueProcessor" type="Crossroads.AsyncJobs.Application.IQueueProcessor" mapTo="Crossroads.AsyncJobs.Application.QueueProcessor[[crds_angular.Models.Crossroads.Stewardship.StripeEvent]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="queueProcessorConfig">
          <dependency name="stripeEventQueueProcessorConfig"/>
        </param>
        <param name="messageQueueFactory">
          <dependency name="asyncMessageQueueFactory"/>
        </param>
      </constructor>
    </register>
    <register name="stripeEventQueueProcessorConfig" type="Crossroads.AsyncJobs.Models.QueueProcessorConfig[[crds_angular.Models.Crossroads.Stewardship.StripeEvent]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <property name="QueueName" value=".\Private$\StripeEvents" />
      <property name="JobExecutor">
        <dependency name="stripeEventProcessor" />
      </property>
    </register>
    <register name="stripeEventProcessor" type="Crossroads.AsyncJobs.Interfaces.IJobExecutor[[crds_angular.Models.Crossroads.Stewardship.StripeEvent]]" mapTo="Crossroads.AsyncJobs.Processors.StripeEventProcessor">
      <lifetime type="ContainerControlledLifetimeManager" />
    </register>

    <!-- Check scanner batch processor -->
    <register name="checkScannerBatchQueueProcessor" type="Crossroads.AsyncJobs.Application.IQueueProcessor" mapTo="Crossroads.AsyncJobs.Application.QueueProcessor[[crds_angular.Models.Crossroads.Stewardship.CheckScannerBatch]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="queueProcessorConfig">
          <dependency name="checkScannerBatchQueueProcessorConfig"/>
        </param>
        <param name="messageQueueFactory">
          <dependency name="asyncMessageQueueFactory"/>
        </param>
      </constructor>
    </register>
    <register name="checkScannerBatchQueueProcessorConfig" type="Crossroads.AsyncJobs.Models.QueueProcessorConfig[[crds_angular.Models.Crossroads.Stewardship.CheckScannerBatch]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <property name="QueueName" value=".\Private$\CheckScannerDonations" />
      <property name="JobExecutor">
        <dependency name="checkScannerBatchProcessor" />
      </property>
    </register>
    <register name="checkScannerBatchProcessor" type="Crossroads.AsyncJobs.Interfaces.IJobExecutor[[crds_angular.Models.Crossroads.Stewardship.CheckScannerBatch]]" mapTo="Crossroads.AsyncJobs.Processors.CheckScannerBatchProcessor">
      <lifetime type="ContainerControlledLifetimeManager" />
    </register>

    <!-- SignupToServe queue processor-->
    <register name="signupToServeQueueProcessor" type="Crossroads.AsyncJobs.Application.IQueueProcessor" mapTo="Crossroads.AsyncJobs.Application.QueueProcessor[[crds_angular.Models.Crossroads.Serve.SaveRsvpDto]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="queueProcessorConfig">
          <dependency name="signupToServeQueueProcessorConfig"/>
        </param>
        <param name="messageQueueFactory">
          <dependency name="asyncMessageQueueFactory"/>
        </param>
      </constructor>
    </register>
    <register name="signupToServeQueueProcessorConfig" type="Crossroads.AsyncJobs.Models.QueueProcessorConfig[[crds_angular.Models.Crossroads.Serve.SaveRsvpDto]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <property name="QueueName" value=".\Private$\SignupToServeEvents" />
      <property name="JobExecutor">
        <dependency name="signupToServeEventProcessor" />
      </property>
    </register>
    <register name="signupToServeEventProcessor" type="Crossroads.AsyncJobs.Interfaces.IJobExecutor[[crds_angular.Models.Crossroads.Serve.SaveRsvpDto]]" mapTo="Crossroads.AsyncJobs.Processors.SignupToServeProcessor" >
      <lifetime type="ContainerControlledLifetimeManager" />
    </register>

    <!-- Trip Event queue processor -->
    <register name="tripEventQueueProcessor" type="Crossroads.AsyncJobs.Application.IQueueProcessor" mapTo="Crossroads.AsyncJobs.Application.QueueProcessor[[crds_angular.Models.Crossroads.Trip.TripApplicationDto]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="queueProcessorConfig">
          <dependency name="tripEventQueueProcessorConfig"/>
        </param>
        <param name="messageQueueFactory">
          <dependency name="asyncMessageQueueFactory"/>
        </param>
      </constructor>
    </register>
    <register name="tripEventQueueProcessorConfig" type="Crossroads.AsyncJobs.Models.QueueProcessorConfig[[crds_angular.Models.Crossroads.Trip.TripApplicationDto]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <property name="QueueName" value=".\Private$\TripEvents" />
      <property name="JobExecutor">
        <dependency name="tripEventProcessor" />
      </property>
    </register>
    <register name="tripEventProcessor" type="Crossroads.AsyncJobs.Interfaces.IJobExecutor[[crds_angular.Models.Crossroads.Trip.TripApplicationDto]]" mapTo="Crossroads.AsyncJobs.Processors.TripEventProcessor">
      <lifetime type="ContainerControlledLifetimeManager" />
    </register>

    <!-- Scheduled Job queue processor -->
    <register name="scheduledJobProcessor" type="Crossroads.AsyncJobs.Application.IQueueProcessor" mapTo="Crossroads.AsyncJobs.Application.QueueProcessor[[crds_angular.Models.Crossroads.ScheduledJob]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="queueProcessorConfig">
          <dependency name="scheduledJobQueueProcessorConfig"/>
        </param>
        <param name="messageQueueFactory">
          <dependency name="asyncMessageQueueFactory"/>
        </param>
      </constructor>
    </register>
    <register name="scheduledJobQueueProcessorConfig" type="Crossroads.AsyncJobs.Models.QueueProcessorConfig[[crds_angular.Models.Crossroads.ScheduledJob]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <property name="QueueName" value=".\Private$\ScheduledJobs" />
      <property name="JobExecutor">
        <dependency name="scheduledJobProcessor" />
      </property>
    </register>
    <register name="scheduledJobProcessor" type="Crossroads.AsyncJobs.Interfaces.IJobExecutor[[crds_angular.Models.Crossroads.ScheduledJob]]" mapTo="Crossroads.AsyncJobs.Processors.ScheduledJobProcessor">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="scheduler"></param>
      </constructor>
    </register>
  </container>
</asyncJobsUnity>
